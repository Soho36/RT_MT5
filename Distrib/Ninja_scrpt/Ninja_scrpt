#region Using declarations
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

namespace NinjaTrader.NinjaScript.Strategies
{
    public class MyCustomStrategy : Strategy
    {
        private bool executeLongTrade = false;
        private bool executeShortTrade = false;
        private double stopPrice = 0;
        private double targetPrice1 = 0;
        private double targetPrice2 = 0;
		// Track whether stop losses have been moved to breakeven
		bool stopLossMovedToBreakevenLong1 = false;
		bool stopLossMovedToBreakevenLong2 = false;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Name = "Filetransmit2";
                Calculate = Calculate.OnEachTick;
                EntriesPerDirection = 1; // Allow 3 entries
                EntryHandling = EntryHandling.UniqueEntries;
            }
        }

        protected override void OnBarUpdate()
		{
		    if (CurrentBars[0] < BarsRequiredToTrade)
		        return;

		    string signalFilePath = "C:\\Users\\Liikurserv\\PycharmProjects\\BCS_1\\RT\\trade_signal.txt";

		    if (File.Exists(signalFilePath))
		    {
		        try
		        {
		            string signal = File.ReadAllText(signalFilePath).Trim();
		            string[] parts = signal.Split(',');

		            if (parts.Length == 4)
		            {
		                string tradeDirection = parts[0].Trim();
		                if (double.TryParse(parts[1].Trim(), out stopPrice) &&
		                    double.TryParse(parts[2].Trim(), out targetPrice1) &&
		                    double.TryParse(parts[3].Trim(), out targetPrice2))
		                {
		                    if (tradeDirection.Equals("Buy", StringComparison.OrdinalIgnoreCase) && Position.MarketPosition == MarketPosition.Flat)
		                    {
		                        executeLongTrade = true;
		                        File.WriteAllText(signalFilePath, string.Empty);
		                    }
		                    else if (tradeDirection.Equals("Sell", StringComparison.OrdinalIgnoreCase) && Position.MarketPosition == MarketPosition.Flat)
		                    {
		                        executeShortTrade = true;
		                        File.WriteAllText(signalFilePath, string.Empty);
		                    }
		                }
		            }
		        }
		        catch (Exception ex)
		        {
		            Print($"Error reading signal file: {ex.Message}");
		        }
		    }

		    // Handle long positions
		    if (executeLongTrade)
		    {
		        double entryPrice = Close[0];

		        EnterLong(2, "Long1");
		        SetStopLoss("Long1", CalculationMode.Price, stopPrice, false);
		        SetProfitTarget("Long1", CalculationMode.Price, targetPrice1);

		        Print($"1-st LONG order placed with TP1: {targetPrice1}, SL: {stopPrice}");
		        EnterLong(1, "Long3");
		        SetStopLoss("Long3", CalculationMode.Price, stopPrice, false);
		        SetProfitTarget("Long3", CalculationMode.Price, targetPrice2);
		        Print($"2-nd LONG order placed with TP2: {targetPrice2}, SL: {stopPrice}");

		        executeLongTrade = false;
		    }

		    // Handle short positions
		    if (executeShortTrade)
		    {
		        double entryPrice = Close[0];

		        EnterShort(2, "Short1");
		        SetStopLoss("Short1", CalculationMode.Price, stopPrice, false);
		        SetProfitTarget("Short1", CalculationMode.Price, targetPrice1);
		        Print($"1-st SHORT order placed with TP1: {targetPrice1}, SL: {stopPrice}");

		        EnterShort(1, "Short3");
		        SetStopLoss("Short3", CalculationMode.Price, stopPrice, false);
		        SetProfitTarget("Short3", CalculationMode.Price, targetPrice2);
		        Print($"2-nd SHORT order placed with TP2: {targetPrice2}, SL: {stopPrice}");

		        executeShortTrade = false;
		    }

		    // Move stop to breakeven for long positions once TP1 is reached
		    if (Position.MarketPosition == MarketPosition.Long)
		    {
		        if (Close[0] >= targetPrice1 - 1 * TickSize)
		        {
		            // Move stop loss to breakeven (entry price)
		            SetStopLoss("Long1", CalculationMode.Price, Position.AveragePrice, false);
		            SetStopLoss("Long3", CalculationMode.Price, Position.AveragePrice, false);
		            Print($"Stop loss moved to breakeven for Long1 and Long3 at price: {Position.AveragePrice}");
		        }
		    }

		    // Move stop to breakeven for short positions once TP1 is reached
		    if (Position.MarketPosition == MarketPosition.Short)
		    {
		        if (Close[0] <= targetPrice1 + 1 * TickSize)
		        {
		            // Move stop loss to breakeven (entry price)
		            SetStopLoss("Short1", CalculationMode.Price, Position.AveragePrice, false);
		            SetStopLoss("Short3", CalculationMode.Price, Position.AveragePrice, false);
		            Print($"Stop loss moved to breakeven for Short1 and Short3 at price: {Position.AveragePrice}");
		        }
		    }
		}


    }
}
